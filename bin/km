#!/usr/bin/env python3

import logging
import os.path

import yaml

from kmux.cli import config, args, save_kmux_config
from kmux.kubeconfig import find_name
from kmux.tmux import generate_tmuxinator_template

logging.basicConfig(
    format='[%(asctime)s] [%(levelname)-8s] %(message)s',
    level=logging.getLevelName(args.log.upper()),
    datefmt='%Y-%m-%d %H:%M:%S'
)
log = logging.getLogger(__name__)

if args.start:
    log.info("Ensuring new tmux session")
    # todo
elif args.create:
    src_kubeconfig = args.create
    root_dir = args.rdir
    log.info(f"Creating new cluster: {src_kubeconfig}")
    with open(src_kubeconfig, 'r') as f:
        kube_config = yaml.safe_load(f)
        cluster_name = find_name(kube_config)
        dst_kdir = config.get_kdir()
        dst_tdir = config.get_tdir()
        os.makedirs(dst_kdir, exist_ok=True)
        os.makedirs(dst_tdir, exist_ok=True)
        dst_kubeconfig = os.path.join(dst_kdir, f"{cluster_name}.yaml")
        dst_tmuxinator = os.path.join(dst_tdir, f"{cluster_name}.yaml")
        with open(src_kubeconfig, 'r') as src_file:
            with open(dst_kubeconfig, 'w') as dst_file:
                dst_file.write(src_file.read())
        log.info(f"Created new cluster: {dst_kubeconfig}")
        tmuxinator_config = generate_tmuxinator_template(cluster_name, root_dir, dst_kubeconfig, config.tmuxinator_templates)
        with open(dst_tmuxinator, 'w') as f:
            yaml.dump(tmuxinator_config, f)
        log.info(f"Created new cluster tmuxinator: {dst_tmuxinator}")

save_kmux_config(config)
